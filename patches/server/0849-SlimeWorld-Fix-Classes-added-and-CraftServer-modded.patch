From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ToshioDev <leonreyesjosealexis@gmail.com>
Date: Fri, 11 Mar 2022 14:34:02 -0300
Subject: [PATCH] SlimeWorld Fix Classes added and CraftServer modded.


diff --git a/src/main/java/com/grinderwolf/swm/clsm/CLSMBridge.java b/src/main/java/com/grinderwolf/swm/clsm/CLSMBridge.java
new file mode 100644
index 0000000000000000000000000000000000000000..5068b80e9d53012d6b72387021e2c40aac670e67
--- /dev/null
+++ b/src/main/java/com/grinderwolf/swm/clsm/CLSMBridge.java
@@ -0,0 +1,29 @@
+package com.grinderwolf.swm.clsm;
+
+public interface CLSMBridge {
+
+    default Object getChunk(Object world, int x, int z) {
+        return null;
+    }
+
+    default boolean saveChunk(Object world, Object chunkAccess) {
+        return false;
+    }
+
+    // Array containing the normal world, the nether and the end
+    Object[] getDefaultWorlds();
+
+    boolean isCustomWorld(Object world);
+
+    default boolean skipWorldAdd(Object world) {
+        return false; // If true, the world won't be added to the bukkit world list
+    }
+
+    // When creating a world in 1.16, the WorldServer constructor sets the world's gamemode
+    // to the value that the server has as the default gamemode. However, when overriding
+    // the default world, this value is not yet accessible (savedata in Minecraftserver is
+    // null at this stage), so this method acts as a patch to avoid that NPE in the constructor
+    default Object getDefaultGamemode() {
+        return null;
+    }
+}
diff --git a/src/main/java/com/grinderwolf/swm/clsm/ClassModifier.java b/src/main/java/com/grinderwolf/swm/clsm/ClassModifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..afe4ef92523d63ebc024734a3dac8725e26d4e78
--- /dev/null
+++ b/src/main/java/com/grinderwolf/swm/clsm/ClassModifier.java
@@ -0,0 +1,58 @@
+package com.grinderwolf.swm.clsm;
+
+import com.mojang.datafixers.util.Either;
+
+import java.util.concurrent.CompletableFuture;
+import java.util.function.BooleanSupplier;
+
+/**
+ * This class serves as a bridge between the SWM and the Minecraft server.
+ *
+ * As plugins are loaded using a different ClassLoader, their code cannot
+ * be accessed from a NMS method. Because of this, it's impossible to make
+ * any calls to any method when rewriting the bytecode of a NMS class.
+ *
+ * As a workaround, this bridge simply calls a method of the {@link CLSMBridge} interface,
+ * which is implemented by the SWM plugin when loaded.
+ */
+public class ClassModifier {
+
+    // Required for Paper 1.13 as javassist can't compile this class
+    public static final BooleanSupplier BOOLEAN_SUPPLIER = () -> true;
+
+    private static CLSMBridge customLoader;
+
+    public static CompletableFuture getFutureChunk(Object world, int x, int z) {
+        if (customLoader == null || !isCustomWorld(world)) {
+            return null;
+        }
+
+        return CompletableFuture.supplyAsync(() ->
+            Either.left(customLoader.getChunk(world, x, z))
+        );
+    }
+
+    public static boolean saveChunk(Object world, Object chunkAccess) {
+        return customLoader != null && customLoader.saveChunk(world, chunkAccess);
+    }
+
+    public static boolean isCustomWorld(Object world) {
+        return customLoader != null && customLoader.isCustomWorld(world);
+    }
+
+    public static boolean skipWorldAdd(Object world) {
+        return customLoader != null && customLoader.skipWorldAdd(world);
+    }
+
+    public static void setLoader(CLSMBridge loader) {
+        customLoader = loader;
+    }
+
+    public static Object[] getDefaultWorlds() {
+        return customLoader != null ? customLoader.getDefaultWorlds() : null;
+    }
+
+    public static Object getDefaultGamemode() {
+        return customLoader != null ? customLoader.getDefaultGamemode() : null;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 99a94898316b0601f55b333c15a9926eae24f8a2..b325b8d6286ccfc626bf71dfb32a2727e14ae020 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -8,6 +8,7 @@ import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
+import com.grinderwolf.swm.clsm.ClassModifier;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -251,7 +252,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Paper"; // Paper
+    private final String serverName = "JustPaper"; // Paper
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
@@ -1341,6 +1342,9 @@ public final class CraftServer implements Server {
 
     public void addWorld(World world) {
         // Check if a World already exists with the UID.
+        if (ClassModifier.skipWorldAdd(((CraftWorld) world).getHandle())) {
+            return;
+        }
         if (this.getWorld(world.getUID()) != null) {
             System.out.println("World " + world.getName() + " is a duplicate of another world and has been prevented from loading. Please delete the uid.dat file from " + world.getName() + "'s world directory if you want to be able to load the duplicate world.");
             return;
@@ -2439,11 +2443,7 @@ public final class CraftServer implements Server {
                 Preconditions.checkArgument(clazz == org.bukkit.entity.EntityType.class, "Entity type namespace must have entity type");
 
                 return (org.bukkit.Tag<T>) new CraftEntityTag(EntityTypeTags.getAllTags(), key);
-            // Paper start
-            case org.bukkit.Tag.REGISTRY_ENTITIES:
-                Preconditions.checkArgument(clazz == org.bukkit.entity.EntityType.class, "Entity namespace must have entitytype type");
-                return (org.bukkit.Tag<T>) new io.papermc.paper.CraftEntityTag(net.minecraft.tags.EntityTypeTags.getAllTags(), key);
-            // Paper end
+
             default:
                 throw new IllegalArgumentException();
         }
